package shared

import (
	"net"
	"net/http"
)

// Отдельная функция, потому что:
// 1) используется во многих хендлерах (users, polls  и др)
// 2) способ получения может меняться, сейчас ввиду использования nginx это X-Real-Ip, чтоб потом было проще изменить способ получения
//
// X-forwarded-for не обрабатываем потому, что у нас будет nginx перед go. Если возникнет необходимость поставить еще прокси перед nginx, тогда по ситуации доработаем
// RemoteAddr не обрабатываем тоже потому, что антифлуд методы некорректны будут так как ip nginx сервака будет. Возвращаем ошибку и тогда сможем увидеть что что-то не то значит на nginx и предпринять действия
// Обрабатываем только X-Real-IP, в конфиге nginx обязательно нужно устанавливать его, чтоб не получить поддельный X-Real-IP

func IpHttpGet(r *http.Request) string {
	// nginx передаст x-real-ip
	ip := r.Header.Get("X-Real-IP")
	if ip != "" {
		return ip
	}

	// но чтоб нам запускать сваггер в dev среде (при прямом обращении к микросервису) делаем передачу remoteAddr иначе если этого не делать будет ошибка
	host, _, err := net.SplitHostPort(r.RemoteAddr)
	if err != nil {
		// Не можем распарсить RemoteAddr, возвращаем пустую строку
		return ""
	}

	if host == "127.0.0.1" || host == "::1" {
		return host
	}

	// во всех остальных случаях возвращаем пустую строку, на валидации завалится
	return ""

}
